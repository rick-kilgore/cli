name: Deployment

concurrency: 
  group: production
  cancel-in-progress: true

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
      go_version:
        default: "1.19"
        type: string

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}
      - name: Configure GoReleaser
        run: |
          touch CHANGELOG.md
          sed '/#build:windows/,/^$/d; /#build:macos/,/^$/d' .goreleaser.yml >.goreleaser.generated.yml
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: "~1.17.1"
          args: release -f .goreleaser.generated.yml --skip-validate --skip-publish --release-notes=CHANGELOG.md
        env:
          GORELEASER_CURRENT_TAG: ${{ inputs.tag_name }}
      - name: Generate web manual pages
        run: |
          go run ./cmd/gen-docs --website --doc-path dist/manual
          tar -czvf dist/manual.tar.gz -C dist -- manual
      - uses: actions/upload-artifact@v3
        with:
          name: linux
          if-no-files-found: error
          retention-days: 7
          path: |
            dist/*.tar.gz
            dist/*.rpm
            dist/*.deb
  
  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}
      - name: Configure GoReleaser
        run: |
          touch CHANGELOG.md
          sed '/#build:windows/,/^$/d; /#build:linux/,/^$/d' .goreleaser.yml >.goreleaser.generated.yml
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: "~1.17.1"
          args: release -f .goreleaser.generated.yml --skip-validate --skip-publish --release-notes=CHANGELOG.md
        env:
          GORELEASER_CURRENT_TAG: ${{ inputs.tag_name }}
      - uses: actions/upload-artifact@v3
        with:
          name: macos
          if-no-files-found: error
          retention-days: 7
          path: |
            dist/*.tar.gz
            dist/*.zip
  
  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}
      - name: Configure GoReleaser
        shell: bash
        run: |
          touch CHANGELOG.md
          sed '/#build:macos/,/^$/d; /#build:linux/,/^$/d' .goreleaser.yml >.goreleaser.generated.yml
      - name: Obtain signing certificate
        id: obtain_cert
        shell: bash
        run: |
          base64 -d <<<"$CERT_CONTENTS" > ./cert.pfx
          printf "cert-file=%s\n" ".\\cert.pfx" >> $GITHUB_OUTPUT
        env:
          CERT_CONTENTS: ${{ secrets.WINDOWS_CERT_PFX }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: "~1.17.1"
          args: release -f .goreleaser.generated.yml --skip-validate --skip-publish --release-notes=CHANGELOG.md
        env:
          GORELEASER_CURRENT_TAG: ${{ inputs.tag_name }}
          CERT_FILE: ${{ steps.obtain_cert.outputs.cert-file }}
          CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
      - name: Set up MSBuild
        id: setupmsbuild
        uses: microsoft/setup-msbuild@v1.3.1
      - name: Build MSI
        id: buildmsi
        shell: bash
        env:
          MSBUILD_PATH: ${{ steps.setupmsbuild.outputs.msbuildPath }}
          MSI_VERSION: ${{ inputs.tag_name }}
        run: |
          ZIP_FILE=dist/gh_*_windows_amd64.zip
          unzip -o "$ZIP_FILE"
          "${MSBUILD_PATH}\MSBuild.exe" ./build/windows/gh.wixproj -p:SourceDir="$PWD" -p:OutputPath="$PWD\dist" -p:OutputName="$(basename "$ZIP_FILE" ".zip")" -p:ProductVersion="$MSI_VERSION"
      - name: Run GoReleaser
        shell: pwsh
        run: |
          Get-ChildItem -Path .\dist -Filter *.msi | ForEach-Object {
              .\script\sign $_.FullName
          }
        env:
          CERT_FILE: ${{ steps.obtain_cert.outputs.cert-file }}
          CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
      - uses: actions/upload-artifact@v3
        with:
          name: windows
          if-no-files-found: error
          retention-days: 7
          path: |
            dist/*.zip
            dist/*.msi

  release:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    steps:
      - uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R
